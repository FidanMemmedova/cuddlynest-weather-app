import { renderHook, act } from "@testing-library/react";
import useWeatherFetch from "./useWeatherFetch";
import * as service from "../Services/getWeatherData";

const mockData = [
  {
    city: { name: "Baku" },
    date: "2025-09-04T00:00:00+00:00",
    temp: 25,
    tempType: "C",
  },
];

describe("useWeatherFetch Hook", () => {
  it("returns data when fetch succeeds", async () => {
    jest.spyOn(service, "default").mockResolvedValue(mockData);

    const { result, waitForNextUpdate } = renderHook(() => useWeatherFetch());
    await waitForNextUpdate();

    expect(result.current.data).toEqual(mockData);
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBeNull();
  });

  it("returns error when fetch fails", async () => {
    jest.spyOn(service, "default").mockRejectedValue(new Error("Failed"));

    const { result, waitForNextUpdate } = renderHook(() => useWeatherFetch());
    await waitForNextUpdate();

    expect(result.current.data).toBeNull();
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBe("Failed");
  });
});
